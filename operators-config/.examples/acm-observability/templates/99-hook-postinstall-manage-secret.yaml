---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: post-install
    helm.sh/hook-delete-policy: hook-succeeded
    #helm.sh/hook-weight: "-5"
  name: postinstall-{{ $.Values.mgmt.name }}-observe-manage-secret
  #namespace: {{ $.Values.global.gitops.namespace }}
  namespace: open-cluster-management-observability
spec:
  template:
    spec:
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
      serviceAccount: {{ $.Values.global.gitops.service_account }}
      serviceAccountName: {{ $.Values.global.gitops.service_account_name }}
      terminationGracePeriodSeconds: 30
      containers:
        - image: {{ $.Values.global.gitops.hook_image }}
          imagePullPolicy: IfNotPresent
          name: {{ $.Values.mgmt.name }}-observe-manage-secret
          env:
            - name: SLEEP
              value: "1"
          command:
            - /bin/bash
            - -c
            - |
              echo "Quay PostSync Hook"
              # Wait for the CRDs to appear
              echo "Waiting for local-observe-claim ConfigMap"
              while ! `oc get configmap -n open-cluster-management-observability  2>/dev/null | egrep "^local-observe-claim " -q`; do
                sleep $SLEEP;
              done
              echo "Waiting for local-observe-claim Secret"
              while ! `oc get secrets -n open-cluster-management-observability  2>/dev/null | egrep "^local-observe-claim " -q`; do
                sleep $SLEEP;
              done
              # Determine if we are creating the registry for the 1st time or patching the config bundle secret
              PATCH="true"
              if ! `oc get secrets -n open-cluster-management-observability  2>/dev/null | egrep thanos-object-storage -q`; then
                PATCH="false"
              fi      
              # Extract the required values
              echo "Extracting the required credentials and information"
              ACCESS_KEY=$(oc get secrets -n open-cluster-management-observability local-observe-claim -o jsonpath={.data.AWS_ACCESS_KEY_ID} | base64 -d)
              ACCESS_KEY_ESC=$(sed -e 's/[\/\.\\\^\*\$\[]/\\&/g' <<< $ACCESS_KEY)
              SECRET_KEY=$(oc get secrets -n open-cluster-management-observability local-observe-claim -o jsonpath={.data.AWS_SECRET_ACCESS_KEY} | base64 -d)
              SECRET_KEY_ESC=$(sed -e 's/[\/\.\\\^\*\$\[]/\\&/g' <<< $SECRET_KEY)
              BUCKET_NAME=$(oc get configmap -n open-cluster-management-observability local-observe-claim -o jsonpath={.data.BUCKET_NAME})
              BUCKET_HOST=$(oc get configmap -n open-cluster-management-observability local-observe-claim -o jsonpath={.data.BUCKET_HOST})
              BUCKET_PORT=$(oc get configmap -n open-cluster-management-observability local-observe-claim -o jsonpath={.data.BUCKET_PORT})
              #
              # Insert the newly generated credentials and info into thanos.yaml
              #
              echo '{{ $.Values.mgmt.acm.thanos_yaml | b64enc }}' > /tmp/thanos.b64
              cat /tmp/thanos.b64 | base64 -d > /tmp/thanos.yaml
              sed -i -e 's/AWS_ACCESS_KEY_ID/'${ACCESS_KEY_ESC}'/g' /tmp/thanos.yaml
              sed -i -e 's/AWS_SECRET_ACCESS_KEY/'${SECRET_KEY_ESC}'/g' /tmp/thanos.yaml
              sed -i -e 's/BUCKET_NAME/'${BUCKET_NAME}'/g' /tmp/thanos.yaml
              sed -i -e 's/BUCKET_HOST/'${BUCKET_HOST}'.cluster.local/g' /tmp/thanos.yaml
              sed -i -e 's/BUCKET_PORT/'${BUCKET_PORT}'/g' /tmp/thanos.yaml
              # Patch the Quay config secret with the Noobba S3 info
              CONFIG=$(cat /tmp/thanos.yaml | base64 -w0)
              #
              if  [ $PATCH = "true" ]; then
                echo "Patching the current config bundle secret"
                oc patch secret -n open-cluster-management-observability thanos-object-storage -p '{"data":{"thanos.yaml": "'$CONFIG'"{{ "}}" }}'
              else
                echo "Creating the config bundle secret"
                cat << EOF | oc --as=cluster-admin create -f -
              apiVersion: v1
              data:
                thanos.yaml: $CONFIG
              kind: Secret
              metadata:
                name: thanos-object-storage
                namespace: open-cluster-management-observability  
              type: Opaque
              EOF
              fi
              # All Done
              echo "All done! Hooray!"
              sleep 5
              
              