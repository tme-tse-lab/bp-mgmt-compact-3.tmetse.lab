---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: post-install
    helm.sh/hook-delete-policy: hook-succeeded
    #helm.sh/hook-weight: "-5"
  name: postinstall-{{ $.Values.mgmt.name }}-quay-manage-secret
  #namespace: {{ $.Values.global.gitops.namespace }}
  namespace: openshift-operators
spec:
  template:
    spec:
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
      serviceAccount: {{ $.Values.global.gitops.service_account }}
      serviceAccountName: {{ $.Values.global.gitops.service_account_name }}
      terminationGracePeriodSeconds: 30
      containers:
        - image: {{ $.Values.global.gitops.hook_image }}
          imagePullPolicy: IfNotPresent
          name: {{ $.Values.mgmt.name }}-quay-manage-secret
          env:
            - name: SLEEP
              value: "1"
          command:
            - /bin/bash
            - -c
            - |
              echo "Quay PostSync Hook"
              # Wait for the CRDs to appear
              echo "Waiting for local-registry-claim ConfigMap"
              while ! `oc get configmap -n openshift-operators  2>/dev/null | egrep "^local-registry-claim " -q`; do
                sleep $SLEEP;
              done
              echo "Waiting for local-registry-claim Secret"
              while ! `oc get secrets -n openshift-operators  2>/dev/null | egrep "^local-registry-claim " -q`; do
                sleep $SLEEP;
              done
              # Determine if we are creating the registry for the 1st time or patching the config bundle secret
              PATCH="true"
              if ! `oc get secrets -n openshift-operators  2>/dev/null | egrep {{ $.Values.global.quay.config_secret }} -q`; then
                PATCH="false"
              fi      
              # Extract the required values
              echo "Extracting the required credentials and information"
              ACCESS_KEY=$(oc get secrets -n openshift-operators local-registry-claim -o jsonpath={.data.AWS_ACCESS_KEY_ID} | base64 -d)
              ACCESS_KEY_ESC=$(sed -e 's/[\/\.\\\^\*\$\[]/\\&/g' <<< $ACCESS_KEY)
              SECRET_KEY=$(oc get secrets -n openshift-operators local-registry-claim -o jsonpath={.data.AWS_SECRET_ACCESS_KEY} | base64 -d)
              SECRET_KEY_ESC=$(sed -e 's/[\/\.\\\^\*\$\[]/\\&/g' <<< $SECRET_KEY)
              BUCKET_NAME=$(oc get configmap -n openshift-operators local-registry-claim -o jsonpath={.data.BUCKET_NAME})
              BUCKET_HOST=$(oc get configmap -n openshift-operators local-registry-claim -o jsonpath={.data.BUCKET_HOST})
              BUCKET_PORT=$(oc get configmap -n openshift-operators local-registry-claim -o jsonpath={.data.BUCKET_PORT})
              # Create base config from values.yaml entry
              echo "Creating the Noobaa S3 {{ $.Values.global.quay.config_secret }} secret with the new credentials and configured information"
              SSLCERT='{{ coalesce $.Values.mgmt.quay.ssl_cert $.Values.global.quay.ssl_cert | b64enc }}'
              SSLKEY='{{ coalesce $.Values.mgmt.quay.ssl_key $.Values.global.quay.ssl_key | b64enc }}'
              #
              # Insert the newly generated credentials and info into config.yaml
              #
              echo '{{ coalesce $.Values.mgmt.quay.config_yaml $.Values.global.quay.config_yaml | b64enc }}' > /tmp/config.b64
              cat /tmp/config.b64 | base64 -d > /tmp/config.yaml
              sed -i -e 's/AWS_ACCESS_KEY_ID/'${ACCESS_KEY_ESC}'/g' /tmp/config.yaml
              sed -i -e 's/AWS_SECRET_ACCESS_KEY/'${SECRET_KEY_ESC}'/g' /tmp/config.yaml
              sed -i -e 's/BUCKET_NAME/'${BUCKET_NAME}'/g' /tmp/config.yaml
              sed -i -e 's/BUCKET_HOST/'${BUCKET_HOST}'.cluster.local/g' /tmp/config.yaml
              sed -i -e 's/BUCKET_PORT/'${BUCKET_PORT}'/g' /tmp/config.yaml
              # Patch the Quay config secret with the Noobba S3 info
              CONFIG=$(cat /tmp/config.yaml | base64 -w0)
              #
              if  [ $PATCH = "true" ]; then
                echo "Patching the current config bundle secret"
                oc patch secret -n openshift-operators {{ $.Values.global.quay.config_secret }} -p '{"data":{"config.yaml": "'$CONFIG'"{{ "}}" }}'
                oc patch secret -n openshift-operators {{ $.Values.global.quay.config_secret }} -p '{"data":{"ssl.cert": "'$SSLCERT'"{{ "}}" }}'
                oc patch secret -n openshift-operators {{ $.Values.global.quay.config_secret }} -p '{"data":{"ssl.key": "'$SSLKEY'"{{ "}}" }}'
              else
                echo "Creating the config bundle secret"
                cat << EOF | oc --as=cluster-admin create -f -
              kind: Secret
              apiVersion: v1
              metadata:
                name: {{ $.Values.global.quay.config_secret }}
                namespace: openshift-operators
              data:
                config.yaml: $CONFIG
                ssl.cert: $SSLCERT
                ssl.key: $SSLKEY
              type: Opaque
              EOF
              fi
              # All Done
              echo "All done! Hooray!"
              sleep 5
